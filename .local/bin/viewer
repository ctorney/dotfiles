#!/usr/bin/bash

# use nullglob in case there are no matching files
shopt -u nullglob

# create a variable to hold the number of images
num_images=-1
show_counter=0

tput civis

if find "$HOME/.cache/matplotlib/" -mindepth 1 -maxdepth 1 -name "*.png" -print -quit | grep -q .; then
  images=($( ls -t $HOME/.cache/matplotlib/*.png ))
  num_images=${#images[@]}
fi

getwindowsize() {

    # tput cols returns the width of the terminal
    w=$(tput cols)
    # tput lines returns the height of the terminal
    h=$(tput lines)
    wc=9
    hc=18
    w=$((w*wc))
    h=$(((h)*hc))

  return
}


display_image() {
  # if the num_images is 0, do nothing
  if [ $num_images -eq 0 ]; then
    return
  fi
  reset
  tput civis
  if [ $h -eq 0 ]; then 
    convert "${images[$show_counter]}" sixel:-
  else
    if ! [[ -z "$ZELLIJ" ]]; then
      zellij action rename-pane "${images[$show_counter]}"
    fi
    #get width and height of image
    iw=$(identify -format "%w" "${images[$show_counter]}")
    ih=$(identify -format "%h" "${images[$show_counter]}")
    # Calculate the new dimensions as 90% of the terminal dimensions
    maxw=$((w * 90 / 100))
    maxh=$((h - (13*18) ))

    # calculate the scale factor to use for resizing so that the image has the same aspect ratio
    # and the nw is less than w*90/100 and nh is less than h-13*18

    if ((iw/maxw > ih/maxh)); then
      scale_factor=$(awk "BEGIN {print $maxw/$iw}")
    else
      scale_factor=$(awk "BEGIN {print $maxh/$ih}")
    fi

    # set scale factor to be a maximum of 1
    if (( $(echo "$scale_factor > 1" | bc -l) )); then
      scale_factor=1
    fi
    nw=$(awk "BEGIN {print $iw*$scale_factor}")
    nh=$(awk "BEGIN {print $ih*$scale_factor}")

    # make sure nh and nw are integers
    nh=${nh%.*}
    nw=${nw%.*}
    num_lines=$(( ($h - $nh) / 2 / $hc ))
    if [ $num_lines -lt 0 ]; then
      num_lines=0
    fi
    indent=$(( ($w - $nw) / 2 / $wc ))
    # convert "${images[$show_counter]}" sixel:-
    convert "${images[$show_counter]}" -bordercolor gray -border 2x2 -resize ${nw}x${nh} sixel:- | awk -v indent=$indent -v num_lines=$num_lines 'BEGIN { for (i=1; i<=num_lines; i++) printf("\n"); printf("%*s", indent, " "); } { print; }'

    # printf "Press q to quit, n for next image, p for previous image, cc to clear cache"
  fi
}

getwindowsize
echo "Press q to quit, n for next image, p for previous image, cc to clear cache"

while true; do
  read -rsn1 -t 1 input
  if [ "$input" = "q" ]; then
    reset
    break
  fi
  
  if find "$HOME/.cache/matplotlib/" -mindepth 1 -maxdepth 1 -name "*.png" -print -quit | grep -q .; then
    images=($( ls -t $HOME/.cache/matplotlib/*.png ))
    # print out the image file names
    if [ ${#images[@]} -ne $num_images ]; then
      num_images=${#images[@]}
      show_counter=0
      display_image
    fi
    if [ "$input" = "p" ]; then
      let show_counter+=1
      if [ $show_counter -ge $num_images ]; then
        show_counter=0
      fi
      getwindowsize
      display_image
    fi
    if [ "$input" = "n" ]; then
      let show_counter-=1
      if [ $show_counter -lt 0 ]; then
        show_counter=$((num_images - 1))
      fi
      getwindowsize
      display_image
    fi
    if [ "$input" = "c" ]; then
      read -rsn1 -t 1 input
      if [ "$input" = "c" ]; then
        rm $HOME/.cache/matplotlib/*.png
        reset
        num_images=-1
        show_counter=0
      fi
    fi 
  fi
done
tput cnorm
echo
